<?php
/*
 $Id: filter.inc,v 1.91 2008/11/05 22:49:29 jrecords Exp $
 part of m0n0wall (http://m0n0.ch/wall)

 Copyright (C) 2003-2006 Manuel Kasper <mk@neon1.net>.
 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
 this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright
 notice, this list of conditions and the following disclaimer in the
 documentation and/or other materials provided with the distribution.

 THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
 OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 POSSIBILITY OF SUCH DAMAGE.
 */

/* include all configuration functions */
require_once("functions.inc");

function relay_print_relaydconf() {
	printf("############################################\n");
	printf("### relayd.conf file generated by NSWall ###\n");
	printf("############################################\n\n");
	$relaydconf = htmlentities(relay_relaydconf_generate());
	printf("$relaydconf");
}

function relay_relayd_configure() {
	global $config, $g;
	 
	if ($g['booting'])
	echo "Configuring Relays... ";

	/* generate relayd certs */
	relay_relayd_cert_generate();

	/* generate relayd.conf */
	$relaydconf = relay_relaydconf_generate();
	 
	/* create appropriate relayd.conf file */
	$fd = fopen("{$g['varetc_path']}/relayd.conf", "w");
	fwrite($fd, $relaydconf);
	fclose($fd);

	/* fire up relaydd */
	mwexec("/usr/sbin/relayd");
	if ($g['booting'])
	echo "done\n";
	 
	return 0;
}

function relay_relayd_cert_generate() {
	/* generate cert files for ssl*/
	global $config, $g;
	if(is_array($config['relays']['relay'])) {
		foreach ($config['relays']['relay'] as $relay) {
			foreach ($config['relays']['proxyaction'] as $proxyaction) {
				if($config['relays']['proto'] == $proxyaction['name']) {
					foreach ($config['system']['crtmgr']['cert'] as $sslcert) {
						if($sslcert['name'] == $proxyaction['cert']) {
							$privatekey = base64_decode($sslcert['prv']);
							$fd = fopen("{$g['varetc_path']}/ssl/private/{$relay['listenerip']}.key", "w");
							fwrite($fd, $privatekey);;
							fclose($fd);
							$certificate = base64_decode($sslcert['crt']);
							$fd = fopen("{$g['varetc_path']}/ssl/{$relay['listenerip']}.crt", "w");
							fwrite($fd, $certificate);;
							fclose($fd);
						}
					}
				}
			}
		}
	}
}

function relay_relayd_reload() {
	global $config, $g;

	/* generate relayd.conf*/
	$relaydconf = relay_relaydconf_generate();
	 
	/* create appropriate relayd.conf file */
	$fd = fopen("{$g['varetc_path']}/relayd.conf", "w");
	fwrite($fd, $relaydconf);
	fclose($fd);

	/* reload config */
	mwexec("/usr/bin/pkill relayd");
	mwexec("/usr/sbin/relayd");
	 
	return 0;
}

function relay_relayd_parse($config) {
	global $config, $g;

	/* generate relayd.conf*/
	$relaydconf = relay_relaydconf_generate();
	/* create appropriate relayd.conf file */
	$fd = fopen("{$g['tmp_path']}/relayd.conf", "w");
	fwrite($fd, $relaydconf);
	fclose($fd);

	/* check generated relaydconf ruleset */
	$retval = `/usr/sbin/relayd -nf /tmp/relayd.conf 2>&1`;
	if(preg_match('/configuration OK/',$retval)) {
		unlink('/tmp/relayd.conf');
		return 0;
	} else {
		$retval = preg_replace('/\/tmp\//', '', $retval);
		unlink('/tmp/relayd.conf');
		mwexec("/usr/bin/logger -p local0.info -t relaydparse $retval");
		return 1;
	}
}

function relay_relaydconf_generate() {
	global $wfcategories, $config, $g;

	$line = filter_aliasrules_generate();
	$line .= "#######################\n";
	$line .= "### Global Settings ###\n";
	$line .= "#######################\n\n";
	$line .= "interval " . $config['relays']['interval'] . "\n";
	$line .= "timeout " . $config['relays']['timeout'] . "\n";
	$line .= "prefork " . $config['relays']['prefork'] . "\n";
	$line .= "log " . $config['relays']['log'] . "\n\n";
	$line .= "#####################\n";
	$line .= "### Proxy Actions ###\n";
	$line .= "#####################\n\n";
	if (is_array($config['relays']['proxyaction'])) {
		foreach ($config['relays']['proxyaction'] as $proxyaction) {
			$actionslist = $proxyaction['requestheaderactions'];
			$line .= $proxyaction['proto'] . ' protocol ';
			$line .= '"' . $proxyaction['name'] . '" ' . "{\n";
			if(isset($proxyaction['tcpoptions']['enabletcp'])) {
				$line .= "\ttcp {";
				if(isset($proxyaction['tcpoptions']['tcpbacklog']))
				$line .= ' backlog ' . $proxyaction['tcpoptions']['tcpbacklog'] . ',';
				if(isset($proxyaction['tcpoptions']['tcpminttl']))
				$line .= ' ip minttl ' . $proxyaction['tcpoptions']['tcpminttl'] . ',';
				if(isset($proxyaction['tcpoptions']['tcpipttl']))
				$line .= ' ip ttl ' . $proxyaction['tcpoptions']['tcpipttl'] . ',';
				if(isset($proxyaction['tcpoptions']['tcpsack']))
				$line .= ' sack,';
				if(isset($proxyaction['tcpoptions']['tcpnodelay']))
				$line .= " nodelay,";
				if(isset($proxyaction['tcpoptions']['tcpsockbuffer']))
				$line .= ' socket buffer ' . $proxyaction['tcpoptions']['tcpsockbuffer'];
				$line = preg_replace('/,$/', '', $line);
				$line .= " }\n";
			}
			if ($proxyaction['returnerror'] == 'returnerror') {
				$line .= "\treturn error\n";
			}
			if (isset($proxyaction['categories'])) {
				foreach ($wfcategories as $category) {
					if (isset($proxyaction['categories'][$category])) {
						$line .= "\t" . 'label "URL was found in denied category: ' . $category . '"' . "\n\t";
						$line .= 'include "/data/categories/' . "$category.nsdomain" . '"' . "\n\tno label\n";
					}
				}
			}
			if (isset($proxyaction['requestheaderactions'])) {
				foreach ($proxyaction['requestheaderactions'] as $reqheaderact) {
					if($reqheaderact['action'] == 'append' || $reqheaderact['action'] == 'change') {
						$dir = 'to';
						$line .= "\t" . 'request header ' . $reqheaderact['action'] . ' "' . $reqheaderact['from'] . '" ' . $dir . ' "' . $reqheaderact['to'] . '"' . "\n";
					} elseif($reqheaderact['action'] == 'expect' || $reqheaderact['action'] == 'filter') {
						$dir = 'from';
						$line .= "\t" . 'request header ' . $reqheaderact['action'] . ' "' . $reqheaderact['from'] . '" ' . $dir . ' "' . $reqheaderact['to'] . '"' . "\n";
					} else {
						$line .= "\t" . 'request header ' . $reqheaderact['action'] . ' "' . $reqheaderact['from'] . '"' . "\n";
					}
				}
			}
			if (isset($proxyaction['requestcookieactions'])) {
				foreach ($proxyaction['requestcookieactions'] as $reqcookieact) {
					if($reqcookieact['action'] == 'append' || $reqcookieact['action'] == 'change') {
						$dir = 'to';
						$line .= "\t" . 'request cookie ' . $reqcookieact['action'] . ' "' . $reqcookieact['from'] . '" ' . $dir . ' "' . $reqcookieact['to'] . '"' . "\n";
					} elseif($reqcookieact['action'] == 'expect' || $reqcookieact['filter'] == 'change') {
						$dir = 'from';
						$line .= "\t" . 'request cookie ' . $reqcookieact['action'] . ' "' . $reqcookieact['from'] . '" ' . $dir . ' "' . $reqcookieact['to'] . '"' . "\n";
					} else {
						$line .= "\t" . 'request cookie ' . $reqcookieact['action'] . ' "' . $reqcookieact['from'] . '"' . "\n";
					}
				}
			}
			if (isset($proxyaction['requestqueryactions'])) {
				foreach ($proxyaction['requestqueryactions'] as $reqqueryact) {
					if($reqqueryact['action'] == 'append' || $reqqueryact['action'] == 'change') {                                                                $dir = 'to';
					$line .= "\t" . 'request query ' . $reqqueryact['action'] . ' "' . $reqqueryact['from'] . '" ' . $dir . ' "' . $reqqueryact['to'] . '"' . "\n";
					} elseif($reqqueryact['action'] == 'expect' || $reqqueryact['filter'] == 'change') {
						$dir = 'from';
						$line .= "\t" . 'request query ' . $reqqueryact['action'] . ' "' . $reqqueryact['from'] . '" ' . $dir . ' "' . $reqqueryact['to'] . '"' . "\n";
					} else {
						$line .= "\t" . 'request query ' . $reqqueryact['action'] . ' "' . $reqqueryact['from'] . '"' . "\n";
					}
				}
			}
			if (isset($proxyaction['requesturlactions'])) {
				foreach ($proxyaction['requesturlactions'] as $requrlct) {
					if($reqcookieact['action'] == 'append' || $requrlact['action'] == 'change') {                                                                $dir = 'to';
					$line .= "\t" . 'request url ' . $requrlact['action'] . ' "' . $requrlact['from'] . '" ' . $dir . ' "' . $requrlact['to'] . '"' . "\n";
					} elseif($requrlact['action'] == 'expect' || $requrlact['filter'] == 'change') {
						$dir = 'from';
						$line .= "\t" . 'request url ' . $requrlact['action'] . ' "' . $requrlact['from'] . '" ' . $dir . ' "' . $requrlact['to'] . '"' . "\n";
					} else {
						$line .= "\t" . 'request url ' . $requrlact['action'] . ' "' . $requrlact['from'] . '"' . "\n";
					}
				}
			}
			if (isset($proxyaction['responseheaderactions'])) {
				foreach ($proxyaction['responseheaderactions'] as $respheaderact) {
					if($respheaderact['action'] == 'append' || $respheaderact['action'] == 'change') {
						$dir = 'to';
						$line .= "\t" . 'response header ' . $respheaderact['action'] . ' "' . $respheaderact['from'] . '" ' . $dir . ' "' . $respheaderact['to'] . '"' . "\n";
					} elseif($respheaderact['action'] == 'expect' || $respheaderact['filter'] == 'change') {
						$dir = 'from';
						$line .= "\t" . 'response header ' . $respheaderact['action'] . ' "' . $respheaderact['from'] . '" ' . $dir . ' "' . $respheaderact['to'] . '"' . "\n";
					} else {
						$line .= "\t" . 'response header ' . $respheaderact['action'] . ' "' . $respheaderact['from'] . '"' . "\n";
					}
				}
			}
			if (isset($proxyaction['filtercategories'])) {
				foreach ($proxyaction['filtercategories'] as $category) {
					$line .= "\tinclude" . '"/Webfilter/' . "$category.nswf\n";
				}
			}
			if(isset($proxyaction['ssloptions']['enablessl'])) {
				$line .= "\tssl {";
				if(isset($proxyaction['ssloptions']['sslciphers']))
				$line .= ' ciphers ' . $proxyaction['ssloptions']['sslciphers'] . ',';
				if(isset($proxyaction['ssloptions']['sslsessioncache']))
				$line .= ' session cache ' . $proxyaction['ssloptions']['sslsessioncache'] . ',';
				if(isset($proxyaction['ssloptions']['sslv2']))
				$line .= ' sslv2,';
				if(isset($proxyaction['ssloptions']['sslv3']))
				$line .= ' sslv3,';
				if(isset($proxyaction['ssloptions']['tlsv1']))
				$line .= " tlsv1,";
				$line = preg_replace('/,$/', '', $line);
				$line .= " }\n";
			}
			$line .= "}\n\n";
		}
	}
	$line .= "##############\n";
	$line .= "### Relays ###\n";
	$line .= "##############\n\n";
	if (is_array($config['relays']['relay'])) {
		foreach ($config['relays']['relay'] as $relay) {
			$line .= 'relay "' . $relay['name'] . '" ' . "{\n";
			if ($relay['listenertype'] == 'lsnraddr')
			$line .= "\tlisten on " . $relay['listenerip'] . " port " . $relay['listenerport'] . "\n";
			if ($relay['listenertype'] == 'lsnralias')
			$line .= "\tlisten on " . $relay['listeneralias'] . " port " . $relay['listenerport'] . "\n";
			$line .= "\tprotocol " . '"' . $relay['proto'] . '"' . "\n";
			if($relay['pool'] == 'nat lookup') {
				$line .= "\tforward to nat lookup\n";
			} else {
				if($relay['transparent']) {
					$line .= "\ttransparent ";
				} else {
					$line .= "\t";
				}
				if($relay['forward'] == 'nat lookup') {
					$line .= "forward to nat lookup\n";
				} elseif ($relay['forward'] == 'serverpool') {
					$line .= "forward to <" . $relay['pool'] . '> port ' . $relay['internalport'] . ' mode ' . $relay['alg'] . ' check ' . $relay['healthcheck'];
					if($relay['healthcheck'] == 'http' || $relay['healthcheck'] == 'https')  {
						$line .= ' "' . $relay['path'] . '" code ' . $relay['code'];
					}
					$line .= "\n";
				} elseif ($relay['forward'] == 'address') {
					if ($relay['addrtype'] == 'addraddr')
					$line .= "forward to " . $relay['addressip'] . ' port ' . $relay['internalport'] . "\n";
					if ($relay['addrtype'] == 'addralias')
					$line .= "forward to " . $relay['addressalias'] . ' port ' . $relay['internalport'] . "\n";
				}
			}
			if (isset($relay['timeout'])) {
				$line .= "\tsession timeout " . $relay['timeout'] . "\n";
			} else {
				$line .= "\tsession timeout 600\n";
			}
			$line .= "}\n";
		}
	}
	$line .= "\n";
	return $line;
}
