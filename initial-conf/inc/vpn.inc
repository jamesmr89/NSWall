<?php
/*
	$Id: vpn.inc,v 1.5 2009/04/20 17:50:12 jrecords Exp $
	part of m0n0wall (http://m0n0.ch/wall)
	
	Copyright (C) 2003-2006 Manuel Kasper <mk@neon1.net>.
	All rights reserved.
	
	Redistribution and use in source and binary forms, with or without
	modification, are permitted provided that the following conditions are met:
	
	1. Redistributions of source code must retain the above copyright notice,
	   this list of conditions and the following disclaimer.
	
	2. Redistributions in binary form must reproduce the above copyright
	   notice, this list of conditions and the following disclaimer in the
	   documentation and/or other materials provided with the distribution.
	
	THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
	AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
	OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	POSSIBILITY OF SUCH DAMAGE.
*/
	
/* include all configuration functions */
require_once("functions.inc");

function vpn_print_ipsecconf() {
        global $config, $g;
        printf("# ipsec.conf file generated by NSWall\n\n");
        $ipsecconf = vpn_generate_ipsec_conf();
        printf("$ipsecconf\n");
}

function vpn_print_isakmpdconf() {
        global $config, $g;

        /* generate ipsec.conf */
        $ipsecconf = vpn_generate_ipsec_conf();

        /* load ipsec.conf */
        $fd = popen("/sbin/ipsecctl -nvvf - 2>&1", "w");
        if (!$fd) {
                printf("Cannot open /sbin/ipsecctl vpn_ipsec_configure()\n");
                return 1;
        }

        fwrite($fd, $ipsecconf);
        pclose($fd);
}


function convert_dhgroup($group) {
	if($group == '0')
		return 'none';
	elseif($group == '1')
		return 'modp768';
	elseif($group == '2')
		return 'modp1024';
	elseif($group == '5')
                return 'modp1536';
	elseif($group == '14')
                return 'modp2048';
	elseif($group == '15')
                return 'modp3072';
	elseif($group == '16')
                return 'modp4096';
	elseif($group == '17')
                return 'modp6144';
	elseif($group == '18')
                return 'modp8192';
	}

function vpn_ipsec_configure() {
        global $config, $g;

	$ipseccfg = $config['ipsec'];       
 
	if ($g['booting']) {
 	        echo "Configuring IPSEC VPN... ";
        }
   
	    $hostkey = '/conf/isakmpd/local.key';
       	$pubkey  = '/conf/isakmpd/local.pub'; 
		if ( file_exists( $hostkey ) && file_exists( $pubkey )) {
                    exec("cp -p $hostkey /etc/isakmpd/private");
					exec("cp -p $pubkey /etc/isakmpd");
        } else {
            conf_mount_rw();
            echo "openssl: generating new isakmpd RSA key... ";
            mwexec("mkdir -p /conf/isakmpd 2>/dev/null");
            exec("/usr/sbin/openssl genrsa -out $hostkey 2048 > /dev/null 2>&1");
			exec("cp -p $hostkey /etc/isakmpd/private");
            exec("/bin/chmod 400 /etc/isakmpd/private/local.key");
			exec("/usr/sbin/openssl rsa -out /conf/isakmpd/local.pub -in /etc/isakmpd/private/local.key -pubout > /dev/null 2>&1");
            exec("cp -p $pubkey /etc/isakmpd/");
			conf_mount_ro();
		}

	/* Bring up enc0 interface */
	mwexec("/sbin/ifconfig enc0 up");
	
	/* Start isakmpd if it isn't already running */
	if(!file_exists("{$g['varrun_path']}/isakmpd.pid"))	
		mwexec('/sbin/isakmpd -vvK4 > /dev/null 2>&1');

	/* generate ipsec.conf */
        $ipsecconf = vpn_generate_ipsec_conf();

        /* load ipsec.conf */
        $fd = popen("/sbin/ipsecctl -f  - > /dev/null 2>&1", "w");
        if (!$fd) {
                printf("Cannot open /sbin/ipsecctl vpn_ipsec_configure()\n");
                return 1;
        }

        fwrite($fd, $ipsecconf);
        pclose($fd);

               if ($g['booting'])
                echo "done\n";
	
		filter_configure();

        return 0;
}

function vpn_ipsec_parse_config($config) {
        global $config;

	//generate the ipsec rules.
        $ipsecrules .= vpn_generate_ipsec_conf();

        $descriptorspec = array(
        0 => array("pipe", "r"),  // stdin is a pipe that the child will read from
        1 => array("pipe", "w"),  // stdout is a pipe that the child will write to
        2 => array("pipe", "w") // stderr is a file to write to
        );

        /* load pf ruleset */
        $process = proc_open("/sbin/ipsecctl -nf -", $descriptorspec, $pipes );
        if (is_resource($process)) {
        // $pipes now looks like this:
        // 0 => writeable handle connected to child stdin
        // 1 => readable handle connected to child stdout
        // Any error output will be appended to /tmp/error-output.txt

        fwrite($pipes[0], $ipsecrules);
        fclose($pipes[0]);
        while (!feof($pipes[2])) {
                $out .=  fgets($pipes[2], 128);
        }
        fclose($pipes[2]);
        }
        $return_value = proc_close($process);

        if($return_value) {
                $errors = preg_split("/stdin:/", $out);
                array_shift($errors);
                foreach($errors as $error) {
                        mwexec("/usr/bin/logger -p local0.info -t configparse $error");
                }
        }
        return $return_value;
}

function vpn_generate_ipsec_conf($ipchg = false) {
	global $config, $g;
	
	$ipseccfg = $config['ipsec'];

	
			$gwnumber = 0;
			if (is_array($ipseccfg['gw']) && count($ipseccfg['gw']))
				foreach ($ipseccfg['gw'] as $gw) {
				
					++$gwnumber;

					if (sg_get_const("IPSEC_GATEWAYS") < $gwnumber)
						break;

					if (isset($gw['disabled']))
						continue;
                                        
                                        /* source address */
                                        if (isset($gw['srclist'])) {
                                                $srcs = "{ ";
                                                $srclist = $gw['srclist'];
                                                for($i=0;$i<sizeof($srclist); $i++) {
                                                       $src = "src" . "$i";
                                                       $srcs .= "$srclist[$src], ";
                                                }
                                                $srcs = preg_replace("/\, $/", "", $srcs);
                                                $srcs .= " }";
                                        }
                                        /* destination address */
                                        if (isset($gw['dstlist'])) {
                                                $dsts = "{ ";
                                                $dstlist = $gw['dstlist'];
                                                for($i=0;$i<sizeof($dstlist); $i++) {
                                                       $dst = "dst" . "$i";
                                                       $dsts .= "$dstlist[$dst], ";
                                                }
                                                $dsts = preg_replace("/\, $/", "", $dsts);
                                                $dsts .= " }";
                                        }

					$ipsecconf .= "### Gateway " . $gw['remote-gw'] . ' ###' . "\n";
					#$ipsecconf .= "ike esp from " . $gw['p1']['myident']['myaddress'] . " to " . $gw['remote-gw'] . "\n";	
					$ipsecconf .= 'ike ' . $gw['p2']['protocol'] . ' from ' . $srcs . " to " . $dsts;
					$ipsecconf .= ' peer ' . $gw['remote-gw'] . " \\\n"; 
					/* Phase 1 settings*/
					$ipsecconf .= $gw['p1']['mode'];
					$ipsecconf .= ' auth ' . $gw['p1']['hash-algorithm'];
					$ipsecconf .= ' enc ' . $gw['p1']['encryption-algorithm'];
			 		$ipsecconf .= ' group ' . convert_dhgroup($gw['p1']['dhgroup']);
					$ipsecconf .= ' life ' . $gw['p1']['lifetime'];
					$ipsecconf .= " \\\n";
					/* Phase 2 settings*/
					$ipsecconf .= 'quick auth ' . $gw['p2']['hash-algorithm'];
					$ipsecconf .= ' enc ' . $gw['p2']['encryption-algorithm'];
					$ipsecconf .= ' group ' . convert_dhgroup($gw['p2']['pfsgroup']);
					$ipsecconf .= ' life ' . $gw['p2']['lifetime'];
					if (isset($gw['p1']['authentication_method'])) {
					        $ipsecconf .= " \\\npsk " . '"' . base64_decode($gw['p1']['pre-shared-key']) . '"';
					}
					$ipsecconf .= "\n\n";
			}
	return $ipsecconf;
}

function vpn_pptp_client_connect() {
	global $config, $g;
	/* kill ppp */
        killbypid("{$g['varrun_path']}/tun0.pid");
	
	/* wait for process to die */
        sleep(2);        

	/* startup pptp */
        mwexec("/usr/sbin/ppp -unit0 -ddial vpn");

	return 0;
}

function vpn_pptp_client_disconnect() {
	global $config, $g;
	/* kill ppp */
	killbypid("{$g['varrun_path']}/tun0.pid");
	unlink_if_exists("{$g['varrun_path']}/tun0.pid");
	return 0;
}

function vpn_pptp_configure() {
	global $config, $g;
       
	$curwanip = get_current_wan_address();
 
	if(isset($config['pptp']['client']['enable'])) {
	/* allow gre packets */
	mwexec("/sbin/sysctl net.inet.gre.allow=1");
	
	/* bring up the tun0 interface */
	mwexec("/sbin/ifconfig tun0 create");

	$pptpcfg = $config['pptp']['client'];
	
	if ($g['booting'])
		echo "Configuring PPTP... ";
		
	/* make sure ppp directory exists */
	if (!file_exists("{$g['varetc_path']}/ppp"))
		mkdir("{$g['varetc_path']}/ppp");
		
		/* write ppp.conf */
		$fd = fopen("{$g['varetc_path']}/ppp/ppp.conf", "w");
		if (!$fd) {
			printf("Error: cannot open ppp.conf in vpn_pptp_configure().\n");
			return 1;
		}
		if(isset($pptpcfg['lcplog']))
			$lcp = 'LCP';		
		$pppconf = <<<EOD
default:
      set log Phase Chat IPCP CCP tun command {$lcp}

vpn:
      set device "!/sbin/pptp --nolaunchpppd {$pptpcfg['server']}"
      set authname {$pptpcfg['username']} 
      set authkey {$pptpcfg['password']} 
      set mppe 128 stateless
      disable ipv6

EOD;
	fwrite($fd, $pppconf);
       	fclose($fd);

	/* write ppp.linkup */
       $fd = fopen("{$g['varetc_path']}/ppp/ppp.linkup", "w");
       if (!$fd) {
                printf("Error: cannot open ppp.linkup in vpn_pptp_configure().\n");
                return 1;
       }

       $dgw = get_current_default_gw();
       $ppplinkup = <<<EOD
vpn:
  add {$pptpcfg['server']} {$dgw} 

EOD;
	foreach ($pptpcfg['routelist'] as $route) {
		$ppplinkup .= "  add $route HISADDR\n";
		$ppplinkup .= "  ! sh -c \"/sbin/pfctl -k $curwanip -k $route\"\n";
		$ppplinkup .= "  ! sh -c \"/sbin/pfctl -k HISADDR -k $route\"\n";
	}
	
	fwrite($fd, $ppplinkup);
        fclose($fd);

	/* write ppp.linkdown */
        $fd = fopen("{$g['varetc_path']}/ppp/ppp.linkdown", "w");
        if (!$fd) {
                 printf("Error: cannot open ppp.linkdown in vpn_pptp_configure().\n");
                 return 1;
        }

        $ppplinkdown = <<<EOD

vpn:
  ! sh -c "/sbin/pfctl -a vpn -F all"
  delete {$pptpcfg['server']} 

EOD;
	foreach ($pptpcfg['routelist'] as $route) {
                $ppplinkdown .= "  delete $route\n";
		$ppplinkdown .= "  ! sh -c \"/sbin/pfctl -k $curwanip -k $route\"\n";
		$ppplinkdown .= "  ! sh -c \"/sbin/pfctl -k HISADDR -k $route\"\n";
        }

        fwrite($fd, $ppplinkdown);
        fclose($fd);

	if ($g['booting']) {
       		if(isset($config['pptp']['client']['connectonboot'])) {
			vpn_pptp_client_connect();
		}			 
	        echo "done\n";
	}

	return 0;
	}
}

function vpn_pptpd_configure() {
        global $config, $g;
	
	$syscfg = $config['system'];
	$pptpdcfg = $config['pptpd'];
        $curwanip = get_current_wan_address();

	$subnet_start = $pptpdcfg['remoteip'];
        $subnet_end = long2ip(ip2long($pptpdcfg['remoteip']) + $g['n_pptp_units'] - 1);
	$subnet_last_octet = explode(".", $subnet_start);
        $subnet_last_octet = $subnet_last_octet[3] + $g['n_pptp_units'] - 1;

        if(isset($config['pptpd']['enable'])) {

 		if ($g['booting'])
 	               echo "\nConfiguring PPTP Server... ";

 		/* kill any running pptpd process */
		mwexec("/usr/bin/pkill pptpd");       

		/* allow gre packets */
       		mwexec("/sbin/sysctl net.inet.gre.allow=1");

 	      	/* make sure ppp directory exists */
        	if (!file_exists("{$g['varetc_path']}/ppp"))
 	               mkdir("{$g['varetc_path']}/ppp");

        	/* write pptpd.conf */
        	$fd = fopen("{$g['varetc_path']}/pptpd.conf", "w");
       		if (!$fd) {
        		printf("Error: cannot open pptpd.conf in vpn_pptpd_configure().\n");
 		        return 1;
 	       }
       	       $pptpdconf = <<<EOD
option /etc/ppp/options.pptp
localip $curwanip
remoteip $subnet_start-$subnet_last_octet 

EOD;

		fwrite($fd, $pptpdconf);
		fclose($fd);
	
		 /* write options.pptp */
                $fd = fopen("{$g['varetc_path']}/ppp/options.pptp", "w");
                if (!$fd) {
                        printf("Error: cannot open options.pptp in vpn_pptpd_configure().\n");
                        return 1;
               }
               $pptpopts = <<<EOD
proxyarp
+MSChap-V2
mppe-128
mppe-stateless

EOD;

                fwrite($fd, $pptpopts);
                fclose($fd);

		 /* append pptp section to ppp.conf */
                $fd = fopen("{$g['varetc_path']}/ppp/ppp.conf", "a");
                if (!$fd) {
                        printf("Error: cannot open options.pptp in vpn_pptpd_configure().\n");
                        return 1;
               }
               $pppconf = <<<EOD

pptp:
	set timeout 0
	set log tun phase chat connect lcp ipcp
	enable proxy
	set ifaddr $curwanip $subnet_start-$subnet_end 255.255.255.0
	enable mschapv2
	disable ipv6cp
	accept dns
	require-mschap-v2
	set dns 192.168.7.50
	set dns 192.168.7.50

EOD;

                fwrite($fd, $pppconf);
                fclose($fd);

		/* write ppp.secret */
                $fd = fopen("{$g['varetc_path']}/ppp/ppp.secret", "w");
                if (!$fd) {
                        printf("Error: cannot open ppp.secret in vpn_pptpd_configure().\n");
                        return 1;
                }
	
		foreach ($pptpdcfg['user'] as $user) {
                	$pppsecret .= "{$user['name']}\t{$user['password']}\t*\n";
        	}

                fwrite($fd, $pppsecret);
                fclose($fd);

		/* startup pptpd */
        	mwexec("/usr/sbin/pptpd -l $curwanip -C 10");
	
		if ($g['booting'])
                       echo "done";	
	}
return 0;
}

function vpn_localnet_determine($adr, &$sa, &$sn) {
	global $config, $g;

	if (isset($adr)) {
		if ($adr['network']) {			
			switch ($adr['network']) {
				case 'lan':
					$sn = $config['interfaces']['lan']['subnet'];
					$sa = gen_subnet($config['interfaces']['lan']['ipaddr'], $sn);
					break;
			}
		} else if ($adr['address']) {
			list($sa,$sn) = explode("/", $adr['address']);
			if (is_null($sn))
				$sn = 32;
		}
	} else {
		$sn = $config['interfaces']['lan']['subnet'];
		$sa = gen_subnet($config['interfaces']['lan']['ipaddr'], $sn);
	}
}

function vpn_endpoint_determine($gw, $curwanip) {
	
	global $g, $config;
	
	if ((!$gw['interface']) || ($gw['interface'] == "wan")) {
		if ($curwanip)
			return $curwanip;
		else
			return null;
	} else if ($gw['interface'] == "lan") {
		return $config['interfaces']['lan']['ipaddr'];
	} else {
		$oc = $config['interfaces'][$gw['interface']];
		
		if (isset($oc['enable']) && $oc['if']) {
			return $oc['ipaddr'];
		}
	}
	
	return null;
}
	
?>
