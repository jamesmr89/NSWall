<?php
/*
	$Id: vpn.inc,v 1.5 2009/04/20 17:50:12 jrecords Exp $
	part of m0n0wall (http://m0n0.ch/wall)
	
	Copyright (C) 2003-2006 Manuel Kasper <mk@neon1.net>.
	All rights reserved.
	
	Redistribution and use in source and binary forms, with or without
	modification, are permitted provided that the following conditions are met:
	
	1. Redistributions of source code must retain the above copyright notice,
	   this list of conditions and the following disclaimer.
	
	2. Redistributions in binary form must reproduce the above copyright
	   notice, this list of conditions and the following disclaimer in the
	   documentation and/or other materials provided with the distribution.
	
	THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
	AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
	OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	POSSIBILITY OF SUCH DAMAGE.
*/
	
/* include all configuration functions */
require_once("functions.inc");

function vpn_print_ipsecconf() {
        printf("# ipsec.conf file generated by NSWall\n\n");
        $ipsecconf = htmlentities(vpn_generate_ipsec_conf());
        printf("$ipsecconf\n");
}

function vpn_print_isakmpdconf() {
        global $config, $g;

        /* generate ipsec.conf */
        $ipsecconf = vpn_generate_ipsec_conf();

        /* load ipsec.conf */
        $fd = popen("/sbin/ipsecctl -nvvf - 2>&1", "w");
        if (!$fd) {
                printf("Cannot open /sbin/ipsecctl vpn_ipsec_configure()\n");
                return 1;
        }

        fwrite($fd, $ipsecconf);
        pclose($fd);
}


function convert_dhgroup($group) {
	if($group == '0')
		return 'none';
	elseif($group == '1')
		return 'modp768';
	elseif($group == '2')
		return 'modp1024';
	elseif($group == '5')
                return 'modp1536';
	elseif($group == '14')
                return 'modp2048';
	elseif($group == '15')
                return 'modp3072';
	elseif($group == '16')
                return 'modp4096';
	elseif($group == '17')
                return 'modp6144';
	elseif($group == '18')
                return 'modp8192';
	}

function vpn_ipsec_configure() {
        global $config, $g;

	$ipseccfg = $config['ipsec'];       
 
	if ($g['booting']) {
        	if (!isset($ipseccfg['enable']))
			return 0;
	
 	        echo "Configuring IPSEC VPN... ";
        }
        /* Start isakmpd if it isn't already running */
	if(!file_exists("{$g['varrun_path']}/isakmpd.pid"))	
		mwexec('/sbin/isakmpd -K');

	/* generate ipsec.conf */
        $ipsecconf = vpn_generate_ipsec_conf();

        /* load ipsec.conf */
        $fd = popen("/sbin/ipsecctl -f  - > /dev/null 2>&1", "w");
        if (!$fd) {
                printf("Cannot open /sbin/ipsecctl vpn_ipsec_configure()\n");
                return 1;
        }

        fwrite($fd, $ipsecconf);
        pclose($fd);

               if ($g['booting'])
                echo "done\n";
	
	if(!$g['booting'])
		filter_configure();

        return 0;
}

function vpn_ipsec_parse_config($config) {
        global $config;

	//generate the ipsec rules.
        $ipsecrules .= vpn_generate_ipsec_conf();

        $descriptorspec = array(
        0 => array("pipe", "r"),  // stdin is a pipe that the child will read from
        1 => array("pipe", "w"),  // stdout is a pipe that the child will write to
        2 => array("pipe", "w") // stderr is a file to write to
        );

        /* load pf ruleset */
        $process = proc_open("/sbin/ipsecctl -nf -", $descriptorspec, $pipes );
        if (is_resource($process)) {
        // $pipes now looks like this:
        // 0 => writeable handle connected to child stdin
        // 1 => readable handle connected to child stdout
        // Any error output will be appended to /tmp/error-output.txt

        fwrite($pipes[0], $ipsecrules);
        fclose($pipes[0]);
        while (!feof($pipes[2])) {
                $out .=  fgets($pipes[2], 128);
        }
        fclose($pipes[2]);
        }
        $return_value = proc_close($process);

        if($return_value) {
                $errors = preg_split("/stdin:/", $out);
                array_shift($errors);
                foreach($errors as $error) {
                        mwexec("/usr/bin/logger -p local0.info -t configparse $error");
                }
        }
        return $return_value;
}

function vpn_generate_ipsec_conf($ipchg = false) {
	global $config, $g;
	
	$curwanip = get_current_wan_address();
	
	$syscfg = $config['system']['general'];
	$ipseccfg = $config['ipsec'];
	$lancfg = $config['interfaces']['lan'];
	$lanip = $lancfg['ipaddr'];
	$lansa = gen_subnet($lancfg['ipaddr'], $lancfg['subnet']);
	$lansn = $lancfg['subnet'];
	
			$tunnelnumber = 0;
			if (is_array($ipseccfg['tunnel']) && count($ipseccfg['tunnel']))
				foreach ($ipseccfg['tunnel'] as $tunnel) {
				
					++$tunnelnumber;
			
					if (isset($tunnel['disabled']))
						continue;
					$ipsecconf .= '### Gateway ' . $tunnel['remote-gateway'] . ' ###' . "\n";
					$ipsecconf .= "ike esp from " . $tunnel['p1']['myident']['address'] . " to " . $tunnel['remote-gateway'] . "\n";
					for($i=0;$i<sizeof($tunnel['addresspolicies']);$i++) {		
							$ipsecconf .= 'ike ' . $tunnel['p2']['protocol'] . ' from ' . $tunnel['addresspolicies']["route$i"];
						$ipsecconf = preg_replace('/--/', ' to ', $ipsecconf);
						$ipsecconf .= ' peer ' . $tunnel['remote-gateway'] . " \\\n"; 
						/* Phase 1 settings*/
						$ipsecconf .= $tunnel['p1']['mode'];
							$ipsecconf .= ' auth ' . $tunnel['p1']['hash-algorithm'];
						$ipsecconf .= ' enc ' . $tunnel['p1']['encryption-algorithm'];
			 			$ipsecconf .= ' group ' . convert_dhgroup($tunnel['p1']['dhgroup']);
						$ipsecconf .= ' life ' . $tunnel['p1']['lifetime'];
						$ipsecconf .= " \\\n";
						/* Phase 2 settings*/
						$ipsecconf .= 'quick auth ' . $tunnel['p2']['hash-algorithm'];
						$ipsecconf .= ' enc ' . $tunnel['p2']['encryption-algorithm'];
						$ipsecconf .= ' group ' . convert_dhgroup($tunnel['p2']['pfsgroup']);
						$ipsecconf .= ' life ' . $tunnel['p2']['lifetime'];
							if (isset($tunnel['p1']['authentication_method'])) {
						$ipsecconf .= " \\\npsk " . '"' . base64_decode($tunnel['p1']['pre-shared-key']) . '"';
						}
						$ipsecconf .= "\n\n";
					}	
				}
	return $ipsecconf;
}

function vpn_pptpd_configure() {
	global $config, $g;
	
	$syscfg = $config['system']['general'];
	$pptpdcfg = $config['pptpd'];
	
	if ($g['booting']) {
		if (!$pptpdcfg['mode'] || ($pptpdcfg['mode'] == "off"))
			return 0;
		
		echo "Configuring PPTP VPN service... ";
	} else {	
		/* kill mpd */
		killbypid("{$g['varrun_path']}/mpd-vpn.pid");
		
		/* wait for process to die */
		sleep(2);
		
		/* remove mpd.conf, if it exists */
		unlink_if_exists("{$g['varetc_path']}/mpd-vpn/mpd.conf");
		unlink_if_exists("{$g['varetc_path']}/mpd-vpn/mpd.links");
		unlink_if_exists("{$g['varetc_path']}/mpd-vpn/mpd.secret");
	}
		
	/* make sure mpd-vpn directory exists */
	if (!file_exists("{$g['varetc_path']}/mpd-vpn"))
		mkdir("{$g['varetc_path']}/mpd-vpn");
		
	switch ($pptpdcfg['mode']) {
		
		case 'server':
			
			/* write mpd.conf */
			$fd = fopen("{$g['varetc_path']}/mpd-vpn/mpd.conf", "w");
			if (!$fd) {
				printf("Error: cannot open mpd.conf in vpn_pptpd_configure().\n");
				return 1;
			}
				
			$mpdconf = <<<EOD
pptpd:

EOD;

			for ($i = 0; $i < $g['n_pptp_units']; $i++) {
				$mpdconf .= "	load pt{$i}\n";
			}
			
			for ($i = 0; $i < $g['n_pptp_units']; $i++) {
			
				$clientip = long2ip(ip2long($pptpdcfg['remoteip']) + $i);
				$ngif = "ng" . ($i+1);
			
				$mpdconf .= <<<EOD

pt{$i}:
	new -i {$ngif} pt{$i} pt{$i}
	set ipcp ranges {$pptpdcfg['localip']}/32 {$clientip}/32
	load pts

EOD;
			}
			
			$mpdconf .= <<<EOD

pts:
	set iface disable on-demand
	set iface enable proxy-arp
	set iface enable tcpmssfix
	set iface idle 1800
	set iface up-script /usr/local/sbin/vpn-linkup
	set iface down-script /usr/local/sbin/vpn-linkdown
	set bundle enable multilink
	set bundle enable crypt-reqd
	set link yes acfcomp protocomp
	set link no pap chap
	set link enable chap-msv2
	set link mtu 1460
	set link keep-alive 10 60
	set ipcp yes vjcomp
	set bundle enable compression
	set ccp yes mppc
	set ccp yes mpp-e128
	set ccp yes mpp-stateless

EOD;
			
			if (!isset($pptpdcfg['req128'])) {
				$mpdconf .= <<<EOD
	set ccp yes mpp-e40
	set ccp yes mpp-e56

EOD;
			}
			
			if (is_array($pptpdcfg['dnsserver']) && ($pptpdcfg['dnsserver'][0])) {
				$mpdconf .= "	set ipcp dns " . join(" ", $pptpdcfg['dnsserver']) . "\n";
			} else if (isset($config['dnsmasq']['enable'])) {
				$mpdconf .= "	set ipcp dns " . $config['interfaces']['lan']['ipaddr'];
				if ($syscfg['dnsserver'][0])
					$mpdconf .= " " . $syscfg['dnsserver'][0];
				$mpdconf .= "\n";
			} else if (is_array($syscfg['dnsserver']) && ($syscfg['dnsserver'][0])) {
				$mpdconf .= "	set ipcp dns " . join(" ", array_slice($syscfg['dnsserver'], 0, 2)) . "\n";
			}
			
			if (isset($pptpdcfg['radius']['enable'])) {
				$mpdconf .= <<<EOD
	set radius server {$pptpdcfg['radius']['server']} "{$pptpdcfg['radius']['secret']}"
	set radius retries 3
	set radius timeout 10
	set bundle enable radius-auth
	set bundle disable radius-fallback

EOD;

				if (isset($pptpdcfg['radius']['accounting'])) {
					$mpdconf .= <<<EOD
	set bundle enable radius-acct

EOD;
				}
			}

			fwrite($fd, $mpdconf);
			fclose($fd);
			
			/* write mpd.links */
			$fd = fopen("{$g['varetc_path']}/mpd-vpn/mpd.links", "w");
			if (!$fd) {
				printf("Error: cannot open mpd.links in vpn_pptpd_configure().\n");
				return 1;
			}
			
			$mpdlinks = "";
			
			for ($i = 0; $i < $g['n_pptp_units']; $i++) {
				$mpdlinks .= <<<EOD

pt{$i}:
	set link type pptp
	set pptp enable incoming
	set pptp disable originate
	set pptp disable windowing
	set pptp self 127.0.0.1

EOD;
			}

			fwrite($fd, $mpdlinks);
			fclose($fd);
			
			/* write mpd.secret */
			$fd = fopen("{$g['varetc_path']}/mpd-vpn/mpd.secret", "w");
			if (!$fd) {
				printf("Error: cannot open mpd.secret in vpn_pptpd_configure().\n");
				return 1;
			}
			
			$mpdsecret = "";
			
			if (is_array($pptpdcfg['user'])) {
				foreach ($pptpdcfg['user'] as $user)
					$mpdsecret .= "{$user['name']} \"{$user['password']}\" {$user['ip']}\n";
			}

			fwrite($fd, $mpdsecret);
			fclose($fd);
			chmod("{$g['varetc_path']}/mpd-vpn/mpd.secret", 0600);
			
			/* fire up mpd */
			mwexec("/usr/local/sbin/mpd -b -d {$g['varetc_path']}/mpd-vpn -p {$g['varrun_path']}/mpd-vpn.pid pptpd");
			
			break;
			
		case 'redir':
			break;
	}
	
	if (!$g['booting']) {
		/* reload the filter */
		filter_configure();
	}
	
	if ($g['booting'])
		echo "done\n";
	
	return 0;
}

function vpn_localnet_determine($adr, &$sa, &$sn) {
	global $config, $g;

	if (isset($adr)) {
		if ($adr['network']) {			
			switch ($adr['network']) {
				case 'lan':
					$sn = $config['interfaces']['lan']['subnet'];
					$sa = gen_subnet($config['interfaces']['lan']['ipaddr'], $sn);
					break;
			}
		} else if ($adr['address']) {
			list($sa,$sn) = explode("/", $adr['address']);
			if (is_null($sn))
				$sn = 32;
		}
	} else {
		$sn = $config['interfaces']['lan']['subnet'];
		$sa = gen_subnet($config['interfaces']['lan']['ipaddr'], $sn);
	}
}

function vpn_endpoint_determine($tunnel, $curwanip) {
	
	global $g, $config;
	
	if ((!$tunnel['interface']) || ($tunnel['interface'] == "wan")) {
		if ($curwanip)
			return $curwanip;
		else
			return null;
	} else if ($tunnel['interface'] == "lan") {
		return $config['interfaces']['lan']['ipaddr'];
	} else {
		$oc = $config['interfaces'][$tunnel['interface']];
		
		if (isset($oc['enable']) && $oc['if']) {
			return $oc['ipaddr'];
		}
	}
	
	return null;
}
	
?>
